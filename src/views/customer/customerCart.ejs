<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Cart | ArtisanSpace</title>
  <link rel="stylesheet" href="/navbar2.css" />
  <link rel="stylesheet" href="/footer.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>
<style>
  /* Main Layout */
:root {
  --primary-color: #5c4033;
  --secondary-color: #8b4513;
  --accent-color: #deb887;
  --background-color: #f8f8f8;
  --text-color: #333;
  --light-grey: #f8ead8;
  --border-radius: 8px;
  --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  --transition-speed: 0.3s;
}

body {
  margin: 0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

body::-webkit-scrollbar {
  display: none;
}

main {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem 4rem; /* Added bottom padding */
  font-family: "Baloo Bhai 2";
  display: flex;
  flex-direction: column;
  align-items: center;
  flex: 1;
  width: 100%;
}

/* Content Box Styles */
#contentBox {
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 2rem;
  position: relative;
  width: 100%;
  max-width: 1000px;
  margin-bottom: 2rem; /* Added margin bottom */
}

.cart-items {
  margin-bottom: 3rem; /* Add extra space at bottom of cart items */
}

/* Button Box */
.button-box {
  display: flex;
  justify-content: center;
  gap: 15px;
  margin: 20px;
}

.button-box button {
  padding: 12px 24px;
  cursor: pointer;
  border: none;
  font-size: 16px;
  border-radius: 8px;
  transition: 0.3s;
}

.button-box button:hover {
  opacity: 0.8;
}

#cartBtn {
  background-color: var(--primary-color);
  color: white;
}

#historyBtn {
  background-color: var(--primary-color);
  color: white;
}

/* Cart Item Styles */
.cart-item {
  display: grid;
  grid-template-columns: 100px 1fr auto auto;
  gap: 1.5rem;
  align-items: center;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  transition: transform var(--transition-speed),
    box-shadow var(--transition-speed);
  border-left: 4px solid var(--primary-color);
}

.cart-item:hover {
  transform: translateY(-3px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.cart-item img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.cart-item-details {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.cart-item-name {
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--text-color);
}

.cart-item-price {
  color: var(--primary-color);
  font-weight: 600;
  font-size: 1.1rem;
}

/* Quantity Controls */
.quantity-controls {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.quantity-input {
  width: 60px;
  padding: 0.5rem;
  text-align: center;
  border: 1px solid var(--light-grey);
  border-radius: var(--border-radius);
  font-size: 1rem;
}

.quantity-btn {
  background-color: var(--light-grey);
  border: none;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  font-size: 1rem;
  font-weight: bold;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.quantity-btn:hover {
  background-color: var(--accent-color);
  color: white;
}

.remove-btn {
  background: #e74c3c;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: background var(--transition-speed);
}

.remove-btn:hover {
  background: #c0392b;
}

/* Empty Cart Message */
.empty-cart {
  text-align: center;
  padding: 3rem 0;
}

.empty-cart h2 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: var(--text-color);
}

.empty-cart p {
  color: #666;
  margin-bottom: 2rem;
}

.shop-now-btn {
  display: inline-block;
  background-color: var(--primary-color);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: var(--border-radius);
  text-decoration: none;
  font-weight: 600;
  transition: background var(--transition-speed);
}

.shop-now-btn:hover {
  background-color: var(--secondary-color);
}

/* Checkout Button */
.checkout-button {
  display: block;
  width: 100%;
  max-width: 300px;
  margin: 2rem auto 0;
  padding: 1rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: var(--border-radius);
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background var(--transition-speed),
    transform var(--transition-speed);
  text-align: center;
}

.checkout-button:hover {
  background-color: var(--secondary-color);
  transform: translateY(-2px);
}

/* History Section */
#historyBox {
  margin-top: 2rem;
  width: 100%;
}

.history-item {
  display: grid;
  grid-template-columns: 100px 1fr;
  gap: 1.5rem;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  transition: transform var(--transition-speed);
  border-left: 4px solid var(--primary-color);
}

.history-item:hover {
  transform: translateY(-3px);
}

.history-item img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: var(--border-radius);
}

.product-details h3 {
  margin-top: 0;
  margin-bottom: 0.75rem;
  color: var(--text-color);
}

.product-details p {
  margin: 0.25rem 0;
  color: #666;
}

/* Navigation Tabs */
.cart-tabs {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  width: 100%;
  justify-content: center;
}

.cart-tab {
  padding: 0.75rem 1.5rem;
  background-color: var(--light-grey);
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: background var(--transition-speed);
  font-weight: bold;
  min-width: 120px;
  text-align: center;
}

.cart-tab.active {
  background-color: var(--primary-color);
  color: white;
}

.cart-tab:hover:not(.active) {
  background-color: var(--accent-color);
}

/* Hide headings */
.cart-items h1,
#historyBox h1 {
  display: none;
}

/* Responsive Design */
@media (max-width: 768px) {
  .cart-item {
    grid-template-columns: 80px 1fr;
    grid-template-rows: auto auto;
    gap: 1rem;
    padding: 1rem;
  }

  .cart-item img {
    width: 80px;
    height: 80px;
    grid-row: span 2;
  }

  .quantity-controls {
    grid-column: 2;
    justify-content: flex-start;
    margin-top: 0.5rem;
  }

  .remove-btn {
    grid-column: 2;
    justify-self: flex-start;
    margin-top: 0.5rem;
  }
}

@media (max-width: 500px) {
  #contentBox {
    padding: 1rem;
  }

  .cart-item {
    grid-template-columns: 1fr;
  }

  .cart-item img {
    width: 100%;
    height: 180px;
    grid-row: 1;
  }

  .cart-item-details {
    grid-row: 2;
  }

  .quantity-controls,
  .remove-btn {
    grid-row: 3;
    grid-column: 1;
    width: 100%;
    margin-top: 1rem;
  }

  .remove-btn {
    grid-row: 4;
  }
}

/* Animation for added items */
@keyframes highlightItem {
  0% {
    background-color: rgba(92, 64, 51, 0.2);
  }
  100% {
    background-color: white;
  }
}

.highlight {
  animation: highlightItem 2s ease-out;
}

/* Loading spinner */
.loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 3rem;
  color: var(--primary-color);
}

.loading-spinner i {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.error-message {
  text-align: center;
  padding: 2rem;
  color: #dc3545;
}

.error-message i {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.retry-btn {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: var(--border-radius);
  cursor: pointer;
  margin-top: 1rem;
}

</style>

<body>
  <%- include('../partials/navbar2', { role }) %>
  <main>
    <div id="contentBox">
      <!-- Content will be loaded dynamically -->
      <div class="loading-spinner">
        <i class="fas fa-circle-notch fa-spin"></i>
        <p>Loading your cart...</p>
      </div>
    </div>
  </main>
  <%- include("../partials/footer") %>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      console.log('[CustomerCart] Page loaded. Fetching cart data...');
      refreshCart();
    });
    let isInitialLoad = true;

    // Standard update cart function for non-quantity operations (remove, initial load)
    async function updateCart(userId, productId, action, amount) {
      try {
        console.log('[CustomerCart] Updating cart:', { userId, productId, action, amount });
        const response = await fetch(
          `/customer/cart?userId=${userId}&productId=${productId}&action=${action}&amount=${amount}`, {
            method: "POST",
          }
        );
        const data = await response.json();

        if (data.success) {
          console.log('[CustomerCart] Cart updated successfully:', data);
          showNotification(data.message, "success");
        } else {
          console.warn('[CustomerCart] Failed to update cart:', data);
          showNotification(data.message || "Failed to update cart. Try Again", "error");
        }

        refreshCart();
      } catch (error) {
        console.error("[CustomerCart] Error updating cart:", error);
        showNotification("Something went wrong updating your cart", "error");
      }
    }

    // Function to update cart summary without refreshing the whole cart
    async function updateCartSummary(userId) {
      try {
        console.log('[CustomerCart] Fetching cart summary for user');
        // Fetch just the updated totals
        const response = await fetch(`/customer/cart?summary=true`, {
          headers: {
            "X-Requested-With": "XMLHttpRequest",
          }
        });
        const data = await response.json();

        // Update the total amount if shown on the page
        const totalAmount = document.querySelector('.cart-summary .total-amount');
        if (totalAmount && data.amount) {
          totalAmount.textContent = `₹${parseFloat(data.amount).toFixed(2)}`;
        }  

        console.log('[CustomerCart] Cart summary data:', data);
        return data;
      } catch (error) {
        console.error("[CustomerCart] Error updating cart summary:", error);
        // Don't show notification for this error as it's just a UI update
        return null;
      }
    }

    // Optimized update for quantity changes (no spinner)
    async function updateQuantity(userId, productId, action) {
      try {
        console.log('[CustomerCart] Updating quantity:');
        // Disable the buttons during update
        const item = document.querySelector(`.cart-item[data-id="${productId}"]`);
        const buttons = item.querySelectorAll('.quantity-btn');
        const input = item.querySelector('.quantity-input');
        const currentValue = parseInt(input.value);

        // Disable controls during update
        buttons.forEach(btn => btn.disabled = true);
        input.disabled = true;

        // Update UI immediately for responsiveness
        if (action === 'add') {
          input.value = currentValue + 1;
        } else if (action === 'del' && currentValue > 1) {
          input.value = currentValue - 1;
        }

        // Make the API request
        const response = await fetch(
          `/customer/cart?userId=${userId}&productId=${productId}&action=${action}&amount=0`, {
            method: "POST",
          }
        );
        const data = await response.json();

        if (data.success) {
          console.log('[CustomerCart] Quantity updated successfully:', data);
          showNotification(data.message, "success");
          // Update price totals without full reload
          await updateCartSummary(userId);
        } else {
          // Reset to previous value if failed
          input.value = currentValue;
          console.warn('[CustomerCart] Failed to update quantity:', data);
          showNotification(data.message || "Failed to update quantity. Try Again", "error");
        }
      } catch (error) {
        console.error("[CustomerCart] Error updating quantity:", error);
        showNotification("Something went wrong updating quantity", "error");
      } finally {
        // Re-enable the controls regardless of success or failure
        const item = document.querySelector(`.cart-item[data-id="${productId}"]`);
        if (item) {
          const buttons = item.querySelectorAll('.quantity-btn');
          const input = item.querySelector('.quantity-input');
          buttons.forEach(btn => btn.disabled = false);
          input.disabled = false;
        }
      }
    }


    async function refreshCart() {
      try {
        // Show loading state only on initial load
        if (isInitialLoad) {
          console.log('[CustomerCart] Initial cart load: showing spinner.');
          document.getElementById("contentBox").innerHTML = `
            <div class="loading-spinner">
              <i class="fas fa-circle-notch fa-spin"></i>
              <p>Loading your cart...</p>
            </div>
          `;
          isInitialLoad = false;
        }

        console.log('[CustomerCart] Fetching cart HTML from server...');
        const response = await fetch("/customer/cart", {
          headers: {
            "X-Requested-With": "XMLHttpRequest",
          }
        });
        const html = await response.text();
        document.getElementById("contentBox").innerHTML = html;
        console.log('[CustomerCart] Cart HTML rendered.');

        attachEventListeners();
        console.log('[CustomerCart] Event listeners attached.');
      } catch (error) {
        console.error("[CustomerCart] Error refreshing cart:", error);
        document.getElementById("contentBox").innerHTML = `
          <div class="error-message">
            <i class="fas fa-exclamation-circle"></i>
            <p>Failed to load your cart. Please try again.</p>
            <button onclick="refreshCart()" class="retry-btn">Retry</button>
          </div>
        `;
      }
    }

    function attachEventListeners() {
      console.log('[CustomerCart] Attaching event listeners to cart items.');
      // Attach quantity input listeners
      document.querySelectorAll(".quantity-input").forEach(input => {
        // Disable minus button if quantity is 1
        const currentQuantity = parseInt(input.value);
        if (currentQuantity === 1) {
          const minusBtn = input.parentElement.querySelector('.quantity-btn.minus');
          if (minusBtn) minusBtn.disabled = true;
        }

        input.addEventListener("change", async function() {
          let productId = this.id;
          let newQuantity = parseInt(this.value);

          if (isNaN(newQuantity) || newQuantity < 1) {
            this.value = 1;
            newQuantity = 1;
          }

          // Also disable the minus button if the quantity is set to 1
          const minusBtn = this.parentElement.querySelector('.quantity-btn.minus');
          if (minusBtn) {
            minusBtn.disabled = newQuantity <= 1;
          }

          // Disable the input during update
          this.disabled = true;

          try {
            const response = await fetch(
              `/customer/cart?userId=<%= userId %>&productId=${productId}&action=none&amount=${newQuantity}`, {
                method: "POST",
              }
            );
            const data = await response.json();

            if (data.success) {
              showNotification(data.message, "success");
              await updateCartSummary('<%= userId %>');
            } else {
              showNotification(data.message || "Failed to update quantity", "error");
            }
          } catch (error) {
            console.error("Error updating quantity:", error);
            showNotification("Something went wrong", "error");
          } finally {
            // Re-enable the input
            this.disabled = false;
          }
        });
      });

      // Update quantity buttons to use the new optimized function
      document.querySelectorAll(".quantity-btn.plus").forEach(button => {
        button.addEventListener("click", function() {
          const productId = this.parentElement.querySelector('.quantity-input').id;
          updateQuantity('<%= userId %>', productId, 'add');
        });
        // Remove the inline onclick attribute
        button.removeAttribute('onclick');
      });

      document.querySelectorAll(".quantity-btn.minus").forEach(button => {
        button.addEventListener("click", function() {
          const productId = this.parentElement.querySelector('.quantity-input').id;
          const input = this.parentElement.querySelector('.quantity-input');
          const currentQuantity = parseInt(input.value);

          // Only enable the minus button action if quantity > 1
          if (currentQuantity > 1) {
            updateQuantity('<%= userId %>', productId, 'del');
          }
        });
        // Remove the inline onclick attribute
        button.removeAttribute('onclick');
      });

      // Check for checkout button
      const cartItems = document.querySelectorAll(".cart-item");
      if (cartItems.length > 0 && !document.getElementById("checkoutBtn")) {
        const checkoutButton = document.createElement("button");
        checkoutButton.textContent = "Proceed to Checkout";
        checkoutButton.id = "checkoutBtn";
        checkoutButton.className = "checkout-button";
        checkoutButton.addEventListener("click", () => {
          window.location.href = "/customer/checkout";
        });
        document.querySelector(".cart-items").appendChild(checkoutButton);
      }
    }



    function showNotification(message, type) {
      let notificationContainer = document.querySelector(".notification-container");

      if (!notificationContainer) {
        notificationContainer = document.createElement("div");
        notificationContainer.className = "notification-container";
        document.body.appendChild(notificationContainer);
      }

      // Avoid duplicate notifications of the same message
      if ([...notificationContainer.children].some(n => n.textContent === message)) {
        return;
      }

      const notification = document.createElement("div");
      notification.className = `notification ${type}`;

      // Add icons to notifications
      const icon = type === "success" ? "check-circle" : "exclamation-circle";
      notification.innerHTML = `<i class="fas fa-${icon}"></i> ${message}`;

      notificationContainer.appendChild(notification);

      setTimeout(() => {
        notification.classList.add("fade-out");
        setTimeout(() => {
          notification.remove();
        }, 500);
      }, 3000);
    }

    if (!document.querySelector("#notification-style")) {
      const style = document.createElement("style");
      style.id = "notification-style";
      style.textContent = `
        .notification-container {
          position: fixed;
          top: 20px;
          right: 40px;
          z-index: 1000;
        }
        
        .notification {
          display: flex;
          align-items: center;
          padding: 12px 20px;
          margin-bottom: 10px;
          border-radius: 4px;
          color: white;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          animation: slide-in 0.3s ease-out forwards;
          min-width: 280px;
        }
        
        .notification i {
          margin-right: 10px;
          font-size: 1.2em;
        }
        
        .notification.success {
          background-color: #28a745;
        }
        
        .notification.error {
          background-color: #dc3545;
        }
        
        .notification.fade-out {
          animation: fade-out 0.5s ease-out forwards;
        }
        
        .loading-spinner {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 3rem;
          color: var(--primary-color);
        }
        
        .loading-spinner i {
          font-size: 3rem;
          margin-bottom: 1rem;
        }
        
        .error-message {
          text-align: center;
          padding: 2rem;
          color: #dc3545;
        }
        
        .error-message i {
          font-size: 3rem;
          margin-bottom: 1rem;
        }
        
        .retry-btn {
          background-color: var(--primary-color);
          color: white;
          border: none;
          padding: 0.75rem 1.5rem;
          border-radius: var(--border-radius);
          cursor: pointer;
          margin-top: 1rem;
        }
        
        .quantity-btn {
          background-color: var(--light-grey);
          border: none;
          width: 30px;
          height: 30px;
          border-radius: 50%;
          font-size: 1rem;
          font-weight: bold;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .quantity-btn:hover {
          background-color: var(--accent-color);
          color: white;
        }
        
        /* Add disabled button style */
        .quantity-btn:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
        
        .quantity-input:disabled {
          opacity: 0.7;
          background-color: #f8f8f8;
        }
        
        /* Hide number input spinners (up/down arrows) */
        .quantity-input::-webkit-outer-spin-button,
        .quantity-input::-webkit-inner-spin-button {
          -webkit-appearance: none;
          margin: 0;
        }
        
        /* Firefox */
        .quantity-input {  
          -moz-appearance: textfield;
        }
        
        @keyframes slide-in {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes fade-out {
          from { opacity: 1; }
          to { opacity: 0; }
        }
      `;
      document.head.appendChild(style);
    }
  </script>

</body>

</html>