<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Content-Moderation</title>
  <link rel="stylesheet" href="/navbar2.css" />
  <link rel="stylesheet" href="/footer.css" />
  <link rel="stylesheet" href="/manager/managerContentModeration.css">

</head>

<body>
  <%- include('../partials/navbar2', { role }) %>
  <div class="wrapper">
    <div class="container">
      <h2>Manage Products</h2>

      <div class="tabs">
        <div class="tab" id="tab-approved">Approved Products <span class="count approved-count"></span></div>
        <div class="tab active" id="tab-pending">Pending Products <span class="count pending-count"></span></div>
        <div class="tab" id="tab-disapproved">Disapproved Products <span class="count disapproved-count"></span></div>
      </div>
      <!-- Approved Products -->
      <div id="approved-section" class="hidden">
      </div>
      <!-- Pending Products -->
      <div id="pending-section">
      </div>
      <!-- Disapproved Products -->
      <div id="disapproved-section" class="hidden">
      </div>
    </div>
  </div>


  <%- include("../partials/footer") %>

  <script >
    async function loadPartial(section) {
  try {
    const response = await fetch(`/manager/load-partial/${section}`);
    if (!response.ok) throw new Error("Failed to load section");

    const { success, html, counts } = await response.json();

    if (!success) throw new Error("Failed to retrieve section data");

    const sections = {
      approved: document.getElementById("approved-section"),
      pending: document.getElementById("pending-section"),
      disapproved: document.getElementById("disapproved-section"),
    };

    if (sections[section]) {
      sections[section].innerHTML = html;
    }

    updateCounts(counts);
    await buttonListener();
  } catch (error) {
    console.error("Error loading partial:", error);
  }
}

function updateCounts(counts) {
  document.querySelector(".approved-count").textContent = counts.approved || 0;
  document.querySelector(".pending-count").textContent = counts.pending || 0;
  document.querySelector(".disapproved-count").textContent =
    counts.disapproved || 0;
}

async function buttonListener() {
  const container = document.querySelector(".container");
  container.querySelectorAll(".btn").forEach((btn) => {
    btn.addEventListener("click", async function () {
      let action = this.classList.contains("approve-btn")
        ? "approve"
        : this.classList.contains("disapprove-btn")
        ? "disapprove"
        : this.classList.contains("remove-btn")
        ? "remove"
        : null;

      if (!action) return;

      const productId = this.getAttribute("data-id");

      try {
        const response = await fetch(
          `/manager/content-moderation?action=${action}&productId=${productId}`,
          {
            headers: {
              "X-Requested-With": "XMLHttpRequest",
            },
          }
        );

        const result = await response.json();

        if (!result.success) {
          throw new Error(`Failed to ${action} the product`);
        }

        let sectionToReload;
        if (action === "approve") {
          sectionToReload = "pending";
        } else if (action === "disapprove") {
          sectionToReload = "pending";
        } else if (
          action === "remove" &&
          this.classList.contains("approve-side")
        ) {
          sectionToReload = "approved";
        } else {
          sectionToReload = "disapproved";
        }

        await loadPartial(sectionToReload);
      } catch (error) {
        console.error(error);
      }
    });
  });
}

document.addEventListener("DOMContentLoaded", async () => {
  const tabs = document.querySelectorAll(".tab");

  await loadPartial("pending");

  tabs.forEach((tab) => {
    tab.addEventListener("click", async () => {
      const tabId = tab.id.replace("tab-", "");
      await loadPartial(tabId);
      switchTab(tabId);
    });
  });

  function switchTab(activeTab) {
    tabs.forEach((t) => t.classList.remove("active"));

    const sections = {
      approved: document.getElementById("approved-section"),
      pending: document.getElementById("pending-section"),
      disapproved: document.getElementById("disapproved-section"),
    };

    Object.values(sections).forEach((s) => s.classList.add("hidden"));

    document.getElementById(`tab-${activeTab}`).classList.add("active");
    sections[activeTab].classList.remove("hidden");
  }
});

  </script>

</body>

</html>