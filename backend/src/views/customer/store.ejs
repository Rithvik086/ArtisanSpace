<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Store</title>
  <link rel="stylesheet" href="/navbar2.css">
  <link rel="stylesheet" href="/customer/store.css">
  <link rel="stylesheet" href="/footer.css">
</head>

<body>
  <%- include("../partials/navbar2",{role}) %>

  <main>
    <div class="left">
      <form action="/customer/store" method="GET" id="filter-form">
        <h3>Filter Products</h3>

        <div class="filter-category">
          <h4>Category</h4>
          <label>
            <input type="checkbox" name="category" value="statue"> Statue
          </label>
          <label>
            <input type="checkbox" name="category" value="painting"> Painting
          </label>
          <label>
            <input type="checkbox" name="category" value="footware"> Footware
          </label>
          <label>
            <input type="checkbox" name="category" value="pottery"> Pottery
          </label>
          <label>
            <input type="checkbox" name="category" value="toys"> Toys
          </label>
          <label>
            <input type="checkbox" name="category" value="headware"> Headware
          </label>
          <label>
            <input type="checkbox" name="category" value="musical instrument">
            Musical Instrument
          </label>
          <label>
            <input type="checkbox" name="category" value="other">
            Others
          </label>
        </div>
      </form>
    </div>

    <div class="right">
      <div class="search-bar-container">
        <input type="text" id="searchInput" placeholder="Search products..." aria-label="Search products" />
        <p class="search-validation-message" id="searchValidationMessage">Please enter a valid search term (only letters, numbers, spaces, and hyphens allowed)</p>
        <ul id="resultsList"></ul>
      </div>
      <div class="content">
        <ul class="product-list">
          <% products.forEach(product=> { %>
          <li><%- include("../partials/product-card", {product, userId}) %></li>
          <%})%>
        </ul>
        <ul class="pagination">
          <% if (currentPage> 1) { %>
          <a href="/customer/store?page=<%= currentPage - 1 %>">Previous</a>
          <% } %>

          <% for (let i=1; i <=totalPages; i++) { %>
          <a href="/customer/store?page=<%= i %>" class="<%= i === currentPage ? 'active' : '' %>">
            <%= i %>
          </a>
          <% } %>

          <% if (currentPage < totalPages) { %>
          <a href="/customer/store?page=<%= currentPage + 1 %>">Next</a>
          <% } %>
        </ul>

      </div>
    </div>
  </main>
  <div class="notification-container"></div>

  <%- include("../partials/footer") %>
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const checkboxes = document.querySelectorAll('input[name="category"]');
      let timeout = 300;

      // Retain selected checkboxes after reload
      const urlParams = new URLSearchParams(window.location.search);
      checkboxes.forEach((checkbox) => {
        if (urlParams.getAll("category").includes(checkbox.value)) {
          checkbox.checked = true;
        }

        // Listen for changes and update the URL with a delay
        checkbox.addEventListener("change", function() {
          clearTimeout(timeout); // Clear previous timeout

          timeout = setTimeout(() => {
            const selected = Array.from(document.querySelectorAll('input[name="category"]:checked'))
              .map((cb) => cb.value);

            // Update URL and reload page
            const newUrl = new URL(window.location.href);
            newUrl.searchParams.delete("category");
            selected.forEach((category) => newUrl.searchParams.append("category", category));

            window.location.href = newUrl.toString(); // Reload page after timeout
          }, 500); // Adjust timeout as needed (500ms = 0.5s)
        });
      });
    });

    async function updateCart(userId, productId) {
      try {
        console.log("Adding to cart:", userId, productId); // Debugging line
        const response = await fetch(`/customer/store?userId=${userId}&productId=${productId}`, {
          method: "POST"
        });

        const data = await response.json();

        console.log("Response Data:", data); // Debugging line
        if (data.success) {
          showNotification("Product Added to cart!", "success");
        } else {
          showNotification(data.message || "Failed to Add. Try Again", "error")
        }

        console.log(data.message);
      } catch (error) {
        console.log("Error updating cart: ", error);
      }
    }

    function showNotification(message, type) {
      console.log("Showing notification:", message, type);
      let notificationContainer = document.querySelector(".notification-container")

      if (!notificationContainer) {
        notificationContainer = document.createElement("div")
        notificationContainer.className = "notification-container"
        document.body.appendChild(notificationContainer)
      }

      // Avoid duplicate notifications of the same message
      if ([...notificationContainer.children].some(n => n.textContent === message)) {
        return;
      }

      const notification = document.createElement("div")
      notification.className = `notification ${type}`
      notification.textContent = message

      notificationContainer.appendChild(notification)

      setTimeout(() => {
        notification.classList.add("fade-out")
        setTimeout(() => {
          notification.remove()
        }, 500)
      }, 3000)
    }

    // Add styles for notifications only if not already added
    if (!document.querySelector("#notification-style")) {
      const style = document.createElement("style")
      style.id = "notification-style"
      style.textContent = `
    .notification-container {
      position: fixed;
      top: 20px;
      right: 40px;
      z-index: 1000;
    }
    
    .notification {
      padding: 12px 20px;
      margin-bottom: 10px;
      border-radius: 4px;
      color: white;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      animation: slide-in 0.3s ease-out forwards;
    }
    
    .notification.success {
      background-color: #28a745;
    }
    
    .notification.error {
      background-color: #dc3545;
    }
    
    .notification.fade-out {
      animation: fade-out 0.5s ease-out forwards;
    }
    
    @keyframes slide-in {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes fade-out {
      from { opacity: 1; }
      to { opacity: 0; }
    }
  `
      document.head.appendChild(style)
    }
  </script>

  <!-- Updated search script with input validation -->
  <script type="module">
    import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@7.1.0/dist/fuse.mjs'

    async function getProducts() {
      try {
        const response = await fetch("/api/getProducts");
        const products = await response.json();
        console.log("Products loaded:", products.length);

        // Configure Fuse.js for searching
        const options = {
          keys: ['name', 'description', 'category'],
          includeScore: true,
          threshold: 0.3
        };

        const fuse = new Fuse(products, options);
        const searchInput = document.getElementById('searchInput');
        const resultsList = document.getElementById('resultsList');
        const validationMessage = document.getElementById('searchValidationMessage');

        // Regular expression patterns for validation
        const searchPattern = /^[a-zA-Z0-9\s\-]{1,50}$/;

        function validateSearch(query) {
          if (query.length > 50) {
            validationMessage.textContent = "Search term must not exceed 50 characters";
            validationMessage.style.display = "block";
            searchInput.classList.add('invalid-search');
            return false;
          }

          if (!searchPattern.test(query)) {
            validationMessage.textContent = "Please use only letters, numbers, spaces, and hyphens";
            validationMessage.style.display = "block";
            searchInput.classList.add('invalid-search');
            return false;
          }

          // Valid input
          validationMessage.style.display = "none";
          searchInput.classList.remove('invalid-search');
          return true;
        }

        // Handle input in search box with debounce
        let debounceTimeout;
        searchInput.addEventListener('input', (event) => {
          const query = event.target.value.trim();

          // Clear previous timeout
          clearTimeout(debounceTimeout);

          // Hide validation message when user starts typing again
          if (query.length === 0) {
            validationMessage.style.display = "none";
            searchInput.classList.remove('invalid-search');
            resultsList.innerHTML = '';
            resultsList.style.display = 'none';
            return;
          }

          // Set a new timeout
          debounceTimeout = setTimeout(() => {
            // Validate the input
            if (!validateSearch(query)) {
              resultsList.innerHTML = '';
              resultsList.style.display = 'none';
              return;
            }

            // Sanitize the query to prevent any potential issues
            const sanitizedQuery = query
              .replace(/[^\w\s-]/g, '') // Remove special chars except spaces and hyphens
              .trim();

            if (sanitizedQuery.length === 0) {
              resultsList.innerHTML = '';
              resultsList.style.display = 'none';
              return;
            }

            // Perform search with sanitized query
            const results = fuse.search(sanitizedQuery);
            console.log("Search results:", results.length);

            // Display results below search bar
            if (results.length > 0) {
              resultsList.innerHTML = ''; // Clear previous results

              results.forEach(result => {
                const product = result.item;

                const item = document.createElement("li");

                item.innerHTML = `
                  <a href="/products/${product._id || ''}" class="search-result-link">
                    <div class="search-result-item">
                      <img src="${product.image || '/images/product-placeholder.jpg'}" alt="${product.name}" class="search-result-image">
                      <div class="search-result-info">
                        <h4>${product.name}</h4>
                        <p class="category">${product.category || ''}</p>
                        <p class="price">₹${product.newPrice || product.price || ''}</p>
                      </div>
                    </div>
                  </a>
                `;

                resultsList.appendChild(item);
              });

              resultsList.style.display = 'block';
            } else {
              resultsList.innerHTML = '<li class="no-results">No products found</li>';
              resultsList.style.display = 'block';
            }
          }, 300); // 300ms debounce delay
        });

        // Execute search when Enter key is pressed
        searchInput.addEventListener('keypress', (event) => {
          if (event.key === 'Enter') {
            const query = searchInput.value.trim();
            event.preventDefault(); // Prevent form submission

            if (validateSearch(query)) {
              // Trigger the search
              clearTimeout(debounceTimeout);
              searchInput.dispatchEvent(new Event('input'));
            }
          }
        });

        // Close results when clicking outside
        document.addEventListener('click', (event) => {
          if (!searchInput.contains(event.target) &&
            !resultsList.contains(event.target)) {
            resultsList.style.display = 'none';
          }
        });

        // Keep results open when clicking inside results list
        resultsList.addEventListener('click', (event) => {
          event.stopPropagation();
        });

        // Show results when search input receives focus
        searchInput.addEventListener('focus', () => {
          if (searchInput.value.trim() && validateSearch(searchInput.value.trim())) {
            resultsList.style.display = 'block';
          }
        });
      } catch (error) {
        console.error("Error fetching products:", error);
        showNotification("Could not load search functionality", "error");
      }
    }

    // Initialize search functionality
    await getProducts();
  </script>
</body>

</html>